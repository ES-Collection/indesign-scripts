/* This InDesign CS2 javascript takes a story that has been prepared for the print edition of the English Forward and processes it for parsing by Symphony, the content management system we use on our website.  Symphony will process files that are in properly-formed xhtml or in markdown (or a combination of both, as long as it can make sense of the input).  This script here goes the markdown route, because it's easier for people who are not familiar with html to read.  When the user runs the script, it whatever is selected and processes the parent story of that selection, whether the selection be a text frame, an insertion point, or a block of text.  It then asks for a filename from the user through a save dialog box.  It adds ".rtf" to the filename if necessary, and then it saves two versions of the story:  one unaltered just for reference, in the file "<user-supplied-filename>.rtf", and the other processed, in the file "√_<user-supplied-filename>.rtf".After the files have been saved, the script places the cursor at the beginning of the story, which has not been altered.------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Here is a list of the things that the script does:1.  It marks up bold and italic (and bold-italic) text.  In doing this, it IGNORES text style ranges that contain no alphanumeric characters.2.  It gets rid of the bullets at the beginning of book kickers and Forward Looking Back entries.3.  It styles drop caps as regular text, so they don't end up on separate lines from their stories.4.  It deletes pull quotes, jump lines, and extra paragraph breaks.5.  It converts the Philologos h-dots that Kurt and I use (which are just "h.", kerned and adjusted in such a way that the dot ends up below the h) into proper Unicode h-dots, which should display fine on the web.  Our font that we print the paper in does not have this character, which is why we have to do the workaround.  Most fonts used on the web do have the h-dot character, and if the user is using a font that doesn't, then the browser prints only that character in a font that does have it, so it will always display one way or another.6.  It makes the whole file double-spaced, meaning that it converts all occurrences of one paragraph break into two paragraph breaks.  Two paragraph breaks is the markdown version of an html paragraph tag.7.  It styles block quotes and poetry properly.  Intra-stanza line breaks are created in markdown format, which is two spaces at the end of the line followed by a single paragraph return.8.  It eliminates extra spaces in the text.------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Note:  The user should be reminded that if the outputs from these files are opened in Word, they might end up with gratuitious hyphens which Word actually puts into the text so that if you cut and paste it into Symphony, those hyphens will end up on the web page.  So they should turn off hyphenation in Word, or use TextEdit or something else that doesn't add hyphens.*/

// The function markdownToIndesign() is given an object containing a block// of text, and it finds all the hyperlinks inside the text// that are in markdown format and converts them to // InDesign Hyperlink format (i.e., it removes each URL from// the text itself and puts it into an InDesign Hyperlink).

#include MarkdownToIndesign.library.jsx
	Character.prototype.multiChangeGrep = Word.prototype.multiChangeGrep = TextStyleRange.prototype.multiChangeGrep = Line.prototype.multiChangeGrep = Paragraph.prototype.multiChangeGrep = TextColumn.prototype.multiChangeGrep = Text.prototype.multiChangeGrep = Cell.prototype.multiChangeGrep = Column.prototype.multiChangeGrep = Row.prototype.multiChangeGrep = Table.prototype.multiChangeGrep = Story.prototype.multiChangeGrep = TextFrame.prototype.multiChangeGrep = XMLElement.prototype.multiChangeGrep = Document.prototype.multiChangeGrep = Application.prototype.multiChangeGrep = function (findChangeArray) {  var findChangePair;  app.changeGrepPreferences = NothingEnum.nothing;  app.findGrepPreferences = NothingEnum.nothing;  app.findChangeGrepOptions.properties = {includeFootnotes:true, includeMasterPages:true, includeHiddenLayers:true, wholeWord:false};  for (var i=0; i<findChangeArray.length; i++) {    findChangePair = findChangeArray[i];    app.findGrepPreferences.findWhat = findChangePair.find;    app.changeGrepPreferences.changeTo = findChangePair.change;    this.changeGrep();  app.changeGrepPreferences = NothingEnum.nothing;  app.findGrepPreferences = NothingEnum.nothing;  }}			// multiReplace() is intended to take // an array of find/change pairs, the first// element of each of which will be converted// first into a RegExp, if it comes in as a string.String.prototype.multiReplace = function (findChangeArray) {  var myFind, myChange;  var findChangePair;  var str = this;  for (var i=0; i<findChangeArray.length; i++) {    findChangePair = findChangeArray[i];    myFind = findChangePair.find;    myChange = findChangePair.change;    if (myFind.constructor.name == "String") {      myBefore = RegExp (myFind);    }     str = str.replace (myFind, myChange)  }  return str;}	// Main block.  sort of.	app.scriptPreferences.enableRedraw = false;var myMarkdown = { blockquote : ">", 				   lineBreak  : "  ",				   fontStyles : {bold : "**", italic : "*"} };var myBullets = { bookKicker : "l", forwardLookingBack : "✸", normal : "•" };// REFACTORING NOTE:  ABSTRACT THESE HDots and SDots out to make a hash-table of diacritics!	var myHDots = { capital: {representation: "H.", unicodeValue: "\u1E24"}, 			   lowercase: {representation: "h.", unicodeValue: "\u1E25"} };     var mySDots = { capital: {representation: "S.", unicodeValue: "\u1E62"}, 			   lowercase: {representation: "s.", unicodeValue: "\u1E63"} };     // A lot of times we'll be looking for any paragraph style that has a certain string in// it, say the word "poetry".  These are those strings.// REFACTORING NOTE:  PERHAPS IT MAKES MORE SENSE TO HAVE A LIST OF THE ACTUAL COMPLETE STYLES.// THERE'S NOT THAT MANY OF THEM, AND IT MIGHT BE FASTER.var myStyleStrings = {   pullquote: "pullquote", poetry: "poetry", 						blockquote: "blockquote", bookKicker: "ARTS book", 
						forwardLookingBack: "FLB Body Copy", jumpline: "Jumpline",						suppressFontStyles: ["hed", "pt", "byline", "Philologos", "letter signature", "letters address"] };
						
var myParagraphStyleNames = {	bookKickerTitle: "ARTS book 1.title", bookKickerTitleNoBullet: "ARTS book 1.title no bullet copy",
						bookKickerAuthor: "ARTS book 2.author", bookKickerPublisher: "ARTS book 3.publisher" };var myFontStyleNameSegments = { bold : ["Bold", "Heavy", "Black", "Semibold", "Ultra"], italic : ["Italic", "Oblique"] };

var myFontStyles = { italic: "Book Italic", bold: "Black", book: "Book" };var myAsterisk = "*";// Case-insensitive search of an array of stringsfunction containsAny (myStr, mySearchWords) {	myStr = myStr.toLowerCase();	var i;	for (i=0; i < mySearchWords.length; i++) {		if (myStr.search(mySearchWords[i].toLowerCase()) != -1) {			return true;		}	}	return false;}function reverseString (str) {	var newStr = '';	var i;	for (i=0; i<str.length; i++) {		newStr = newStr + str[str.length-i-1];	}	return newStr;}function onlyWhitespace (obj) /* returns boolean */ {	var i;	var myFoundNonWhitespace;	for (i=0; i<obj.length; i++) {		myFoundNonWhitespace = myFindGrep(obj.characters[i], {findWhat: "[^[:space:]]"}, undefined, {wholeWord: false, caseSensitive: true});		if (myFoundNonWhitespace.length > 0) {			return false;		}	}	return true;}		function removeBlock (myStory, i, test, myParagraphStyleStrings) {	var removedSomething = false;	// The function removeBlock is not always testing for paragraph styles, 	// so the second parameter of the passed function, test, is not always used.	while ((i < myStory.paragraphs.length) && (test (myStory.paragraphs[i], myParagraphStyleStrings))) { // second parameter of test here is not always used.		myStory.paragraphs[i].remove();		removedSomething = true;	}	return removedSomething;}function processStory (myStory) {		// We have to first convert markdown to indesign format, in case	// anyone has put any markdown into this document.	// Then we escape all remaining asterisks and brackets and things like that,	// and then convert everything back to markdown.	myStory.markdownToIndesign(true); // The parameter overrides indesign hyperlinks, assuming the markdown ones are more intentional at this point.		var i;		// The following if statement ensures that the script will work 	// properly in the case of the last paragraph in the story, because 	// the boundary case code for the end of each paragraph 	// (WHICH BY THE WAY IS KIND OF SQUIRRELLY AND NEEDS TO BE	// REWRITTEN) requires a paragraph break at the end	// of every paragraph.	if (myStory.characters[-1].contents != "\r") {		myStory.insertionPoints[-1].contents = "\r";	}	// Similarly, get rid of all paragraph breaks at the very beginning of the story.	while (myStory.paragraphs[0].length == 1) {		myStory.paragraphs[0].remove();	}		// Get rid of all paragraphs that contain only whitespace	for (i=0; i < myStory.paragraphs.length; i++) {		if (onlyWhitespace(myStory.paragraphs[i])) {// DEBUGGING	alert ("Paragraph number " + i + " contains only whitespace.");			 myStory.paragraphs[i].contents = "\r";		}	}		// Now deal with the story paragraph by paragraph.		// We increment by 2 because near the end of each iteration 	// of this main loop, an extra paragraph break gets added.	for (i=0; i < myStory.paragraphs.length; i+=2) {		var myParagraph = myStory.paragraphs[i];		if (i+1 < myStory.paragraphs.length) {			var myNextParagraph = myStory.paragraphs[i+1];		}		else {			var myNextParagraph = 'end of story';		}				// 1.  Get rid of empty paragraphs after this one, and replace them with space-after.		// This will help later in parsing the poetry properly.		var testForParagraphBreaks = function (paragraph) {			return paragraph.length == 1;		}		if (removeBlock (myStory, i+1, testForParagraphBreaks)) {			myParagraph.spaceAfter = 'p12';		}				// 2.  Get rid of pullquotes and jumplines after this paragraph.		var testForStyles = function (paragraph, styleStrings) {			for (var str in styleStrings) {				if (paragraph.appliedParagraphStyle.name.search(styleStrings[str]) != -1) {					return true;				}			}			return false;		}		if (removeBlock (myStory, i+1, testForStyles, [myStyleStrings.pullquote, myStyleStrings.jumpline] )) {
			var lastIndex;			// Find out what the last character of the paragraph is, before 
			// any quote marks and white space.  The reason this is so convoluted
			// is that I can't figure out how to have InDesign's text regexp engine
			// deal with quote characters.
			
			var myTempRegexp = /\S\s*?$/.toString().slice(1,-1);
			var myResult = myFindGrep(myParagraph, {findWhat: myTempRegexp});
			if (myResult != null && myResult.length == 1) {
				lastIndex = myResult[0].index;
				if (myStory.characters[lastIndex].contents == SpecialCharacters.DOUBLE_RIGHT_QUOTE || 
			            myStory.characters[lastIndex].contents == SpecialCharacters.SINGLE_RIGHT_QUOTE) {
			    lastIndex--;
			  }
			  switch (myStory.characters[lastIndex].contents) {
			  	case "-":
			  	  // Remove the hyphen, join the hyphenated word together and concatenate the two paragraphs.
			  	  myResult[0].contents = "";
			  	  // Reset myParagraph.			      myParagraph = myStory.paragraphs[i];
			      // Concatenate.
    			  myParagraph.characters[-1].contents = "";
    			  break;
    			case "?":
    			case "!":
    			case ".":
    			  // If the paragraph is fully justified, assume that it's not supposed
    			  // to be a real paragraph break, and concatenate.  Otherwise, do nothing.
    			  if (myParagraph.justification == Justification.fullyJustified) {
    			  	myParagraph.characters[-1].contents = " "; // one space, replaces the paragraph return.
    			  }
    			  break;
    			default:
    			  // When in doubt, concatenate.
    			  myParagraph.characters[-1].contents = " "; // one space, replaces the paragraph return.
			  }
			}
			// I'm not sure if we'll ever need this else statement, but it's the case where
			// the paragraph consists of only whitespace.  I think that will never happen
			// because of the cleanup procedures that have preceded this, but I'm not sure.
			else {}
			// Reset myParagraph.			myParagraph = myStory.paragraphs[i];
		}				// 3.  Go through all non-poetry paragraphs and replace soft returns with spaces.		// Then go through all poetry paragraphs and replace hard returns with soft returns,		// as long as the next paragraph is also poetry and there is no space-after or space-before		// separating them.  After this block, all soft returns will be part of poetry, 		// and all poetry stanzas will consist of single paragraphs with lines separated by soft		// returns.		if (myParagraph.appliedParagraphStyle.name.search(myStyleStrings.poetry) == -1) {			myFindText(myParagraph, {findWhat: "\n"}, {changeTo: " "}, {wholeWord: false, caseSensitive: true});		}		else {										while ((myParagraph.spaceAfter == 0) && (myNextParagraph != 'end of story') 					&& (myNextParagraph.appliedParagraphStyle.name.search(myStyleStrings.poetry) != -1) && (myNextParagraph.spaceBefore == 0) 					&& (myNextParagraph.length > 1)) {												// reset myParagraph and myNextParagraph, because of a bug in the system.												myParagraph = myStory.paragraphs[i];						if (i+1 < myStory.paragraphs.length) {							myNextParagraph = myStory.paragraphs[i+1];						}						else {							myNextParagraph = 'end of story';						}						var myFoundCharacters = myFindGrep(myRange, {findWhat: "[^ \t]"}, undefined, {wholeWord: false, caseSensitive: true});																		var debugString = "Now inside the while loop which replaces hard returns with soft returns.\r\r" +													"myParagraph.spaceAfter == 0: " + (myParagraph.spaceAfter == 0) + "\r" +							"myNextParagraph != 'end of story': " + (myNextParagraph != 'end of story') + "\r" +							"myNextParagraph.appliedParagraphStyle.name.search(myStyleStrings.poetry) != -1: " + (myNextParagraph.appliedParagraphStyle.name.search(myStyleStrings.poetry) != -1) + "\r" +							"myNextParagraph.spaceBefore == 0: " + (myNextParagraph.spaceBefore == 0) + "\r" +							"myNextParagraph.length > 1: " + (myNextParagraph.length > 1) + "\r" + "\r" +													"myParagraph.spaceAfter: " + myParagraph.spaceAfter + "\r" +							"myNextParagraph itself: see below" + "\r" +							"myNextParagraph.appliedParagraphStyle.name: " + myNextParagraph.appliedParagraphStyle.name + "\r" +							"myNextParagraph.spaceBefore: " + myNextParagraph.spaceBefore + "\r" +							"myNextParagraph.length: " + myNextParagraph.length + "\r" + "\r" +													"Number of paragraphs in the story: " + myStory.paragraphs.length + "\r" +							"Current paragraph: " + i + "\r" +							"Length of current paragraph: " + myParagraph.length + "\r" +							"Next paragraph: " + (i + 1) + "\r" +							"Length of next paragraph: " + myNextParagraph.length + "\r\r" +														"Contents of current paragraph using 'myParagraph.contents':\r\r" +							myParagraph.contents + "\r\r" +							"Contents of current paragraph by just adding up the characters from the beginning to 'myParagraph.characters[-1].contents':\r\r"; 												var tempDebugString = '';						for (debugCounter = myParagraph.characters[-1].index; debugCounter >= myParagraph.index; debugCounter--) {							tempDebugString = tempDebugString + myStory.characters[debugCounter].contents;						}						debugString = debugString + reverseString(tempDebugString) + "\r\r";													debugString = debugString +								"Contents of next paragraph using 'myNextParagraph.contents':\r\r" +							myNextParagraph.contents + "\r\r" +							"Contents of next paragraph by just adding up the characters from the beginning to 'myNextParagraph.characters[-1].contents':\r\r";												var tempDebugString = '';						for (debugCounter = myNextParagraph.characters[-1].index; debugCounter >= myNextParagraph.index; debugCounter--) {							tempDebugString = tempDebugString + myStory.characters[debugCounter].contents;						}						debugString = debugString + reverseString(tempDebugString) + "\r\r";																			myParagraph.spaceAfter = myNextParagraph.spaceAfter;						myParagraph.characters[-1].contents = "\n";  // this will concatenate the next paragraph to this one.													// DEBUG					if (!confirm(debugString)) {// DEBUG						return;// DEBUG					}									}// DEBUG		if (!confirm("Now finished with the while loop.")) {// DEBUG			return;// DEBUG		}					}				// 4.  Get rid of all spaces and rules before and after, now that we don't need them any more.		// And get rid of drop caps and also the forced justification that was in the pullquotes and jumplines.		myParagraph.ruleAbove = false;		myParagraph.ruleBelow = false;		myParagraph.spaceBefore = 0;		myParagraph.spaceAfter = 0;		myParagraph.dropCapCharacters = 0;		myParagraph.justification = Justification.leftJustified;				// 5.  Get rid of book kicker bullets.  		// REFACTORING NOTE:  THIS IS SORT OF CONFUSING AND LAME, AND ALSO NEEDS		// TO BE COMBINED SOMEHOW WITH THE NEXT BLOCK (#5).		if ((myParagraph.appliedParagraphStyle.name.search(myStyleStrings.bookKicker) != -1) 					&& (myParagraph.characters[0].contents == myBullets.bookKicker)) {			myParagraph.characters[0].contents = '';			if (myParagraph.characters[0].contents == ' ') {				myParagraph.characters[0].contents = '';			}			myParagraph.characters[0].appliedFont = "ITC Slimbach";			myParagraph.characters[0].fontStyle = "Black"; // To get rid of the nested zapf dingbats.					}		// 6.  Get rid of forward looking back bullets.		if ((myParagraph.appliedParagraphStyle.name.search(myStyleStrings.forwardLookingBack) != -1) 					&& (myParagraph.characters[0].contents == myBullets.forwardLookingBack)) {			myParagraph.characters[0].contents = '';			if (myParagraph.characters[0].contents == ' ') {				myParagraph.characters[0].contents = '';			}					}
		
		// 6-pre-a.  Map book kicker styles to how we want them to appear on the web.
		if (myParagraph.appliedParagraphStyle.name.search(myStyleStrings.bookKicker) != -1) {
			switch (myParagraph.appliedParagraphStyle.name) {
				case myParagraphStyleNames.bookKickerTitle:
				case myParagraphStyleNames.bookKickerTitleNoBullet:
				  myParagraph.fontStyle = myFontStyles.bold;
				  break;
				case myParagraphStyleNames.bookKickerAuthor:
				  myParagraph.fontStyle = myFontStyles.italic;
				  break;
				case myParagraphStyleNames.bookKickerPublisher:
				  myParagraph.fontStyle = myFontStyles.book;
			}
		}
				
				// 6a.  Change Zapf dingbats bullets to regular bullets.				myFindText(myParagraph, {findWhat: myBullets.sectionBreak, appliedFont: "ITC Zapf Dingbats"}, 														{changeTo: myBullets.normal}, {wholeWord: false, caseSensitive: true});																// 6b. Kill hyphenation.		myParagraph.hyphenation = false;				// 7.  Transform h-dots to Unicode.				var myFoundHDots = myFindText(myParagraph, {findWhat: myHDots.lowercase.representation}, undefined, {wholeWord: false, caseSensitive: false});		// DEBUG START/*			if (myFoundHDots.length > 0) {			var debugStr = "paragraph " + i + ": \r\r" + myParagraph.contents + "\r\r" + "myFoundHDots.length: " + myFoundHDots.length + "\r\r";			for (var d in myFoundHDots) {				if (d != "length") debugStr = debugStr + "myFoundHDots[" + d + "].contents: " + myFoundHDots[d].contents;			}						if (!confirm (debugStr)) return;		}*/			// DEBUG FINISH				var h;		for (h = myFoundHDots.length-1; h >= 0; h--) {			// DEBUG START//				if (!confirm("paragraph " + i + ": \r\r" + myParagraph.contents + "\r\r" + "myFoundHDots[" + h + "]: " + myFoundHDots[h].contents)) return;			// DEBUG FINISH			if (myFoundHDots[h].characters[-1].baselineShift != 0) {				for (var myCase in myHDots) {					if (myFoundHDots[h].contents == myHDots[myCase].representation) {						myFoundHDots[h].contents = myHDots[myCase].unicodeValue;					}				}			}		}		// 7a.  Transform s-dots to Unicode.  REFACTORING NOTE:  THIS H-dot and S-dot code should not be repeated.				var myFoundSDots = myFindText(myParagraph, {findWhat: mySDots.lowercase.representation}, undefined, {wholeWord: false, caseSensitive: false});		// DEBUG START/*			if (myFoundSDots.length > 0) {			var debugStr = "paragraph " + i + ": \r\r" + myParagraph.contents + "\r\r" + "myFoundSDots.length: " + myFoundSDots.length + "\r\r";			for (var d in myFoundSDots) {				if (d != "length") debugStr = debugStr + "myFoundSDots[" + d + "].contents: " + myFoundSDots[d].contents;			}						if (!confirm (debugStr)) return;		}*/			// DEBUG FINISH				var s;		for (s = myFoundSDots.length-1; s >= 0; s--) {			// DEBUG START//				if (!confirm("paragraph " + i + ": \r\r" + myParagraph.contents + "\r\r" + "myFoundHDots[" + h + "]: " + myFoundHDots[h].contents)) return;			// DEBUG FINISH			if (myFoundSDots[s].characters[-1].baselineShift != 0) {				for (var myCase in mySDots) {					if (myFoundSDots[s].contents == mySDots[myCase].representation) {						myFoundSDots[s].contents = mySDots[myCase].unicodeValue;					}				}			}		}		// 8.  Escape asterisks.						myFindText(myParagraph, {findWhat: myAsterisk}, {changeTo: "\\" + myAsterisk}, {wholeWord: false, caseSensitive: true});		// 9.  Get rid of multiple spaces (which may very well have been added when concatenating paragraphs).		myFindGrep(myParagraph, {findWhat: " +"}, {changeTo: " "}, {wholeWord: false, caseSensitive: true});							// 10.  Put markdown asterisk tags around bold, italic, and bold italic sections.		var myPreviousFontStyles = { bold: false, italic: false };		var myCurrentFontStyles = { bold: false, italic: false };				// This "for" loop (after first testing to make sure that j number of textStyleRanges even exist)		// tests to make sure the textStyleRange starts at the last character BEFORE		// the paragraph return, or earlier.  Any textStyleRanges that start at the paragraph return		// (or, because of an awesome Indesign CS4 bug, on the next line) will be ignored.				for (var j=0; j < myParagraph.textStyleRanges.length && myParagraph.textStyleRanges[j].index < myParagraph.insertionPoints[-2].index; j++) {						var myRange = myParagraph.textStyleRanges[j];			/*				// DEBUGGING START			myContents = myRange.contents;			switch (myContents) {				case "\r" : myContents = "<paragraph break>";				break;				case " " : myContents = "<space>";			}			if (!confirm ("paragraph " + i + ", textStyleRange " + j + ": \r\r" + myContents)) return;			// DEBUGGING FINISH*/							var myFoundCharacters = myFindGrep(myRange, {findWhat: "[[:alnum:]]"}, undefined, {wholeWord: false, caseSensitive: true});												if (myFoundCharacters.length > 0) {				for (var style in myMarkdown.fontStyles) {					// This is tricky:  First deal with the special case of when there's an extra space at the end of a bold or 					// italic segment, because then we have to add the markdown at position j-1.										// Then deal with the the case of when there's an extra space at the beginning of a bold					// or italic segment, in which case we won't add the markdown but will instead just prepare					// the TextStates arrays to behave properly on the next iteration through the loop.					// Then finally we get to the general case of a change in bold or italic status.					myCurrentFontStyles[style] = 	(	(containsAny (myRange.fontStyle, myFontStyleNameSegments[style]))													&& 	(!containsAny (myParagraph.appliedParagraphStyle.name, myStyleStrings.suppressFontStyles))	);										if ((myPreviousFontStyles[style] == false) && (myCurrentFontStyles[style] == true)) {						// Get rid of leading spaces in the upcoming bold or italic sequence, by setting the index k to the insertion point.						for (var k=myRange.index; myStory.characters[k].contents == ' '; k++);/*							if (!confirm ("About to insert an asterisk or two.\r\r"										+ "myParagraph: \r\r" + myParagraph.contents + "\r"										+ "(starting at " + myParagraph.index + " and going to " + (myParagraph.index + myParagraph.length) + ")" + "\r\r\r"										+ "myParagraph.textStyleRanges[" + j + "] (total range 0-" + (myParagraph.textStyleRanges.length-1) + "):" + "\r\r" + myRange.contents + "\r\r"										+ "(starting at " + myRange.index + " and going to " + (myRange.index + myRange.length) + ")" + "\r\r\r"										+ "myStory.characters[" + k + "]: \r\r" + myStory.characters[k].contents))  return;						*/													myStory.insertionPoints[k].contents = myMarkdown.fontStyles[style];					}										else if ((myPreviousFontStyles[style] == true) && (myCurrentFontStyles[style] == false)) {						// Now get rid of trailing spaces in the previous bold or italic sequence, by setting the index k to the insertion point.						// This is slightly more tricky.  AND ESPECIALLY SO IF THE PRECEDING SPACE IS BOLD BUT IN A DIFFERENT						// TEXT STYLE RANGE FROM THE BLOCK BEFORE THAT, WHICH ALSO ENDS IN SPACES.  BASICALLY, THIS WILL NEVER HAPPEN.						// BUT JUST TO BE THOROUGH, LET'S TEST WHEN WE GET TO WORK TOMORROW TO MAKE SURE THAT YOU CAN CRUISE BACK BEFORE						// THE BEGINNING OF A TEXTSTYLERANGE WITH A NEGATIVE INDEX GREATER IN MAGNITUDE THAN THE LENGTH OF THE TEXTSTYLERANGE.						for (var k=myRange.index; myStory.characters[k-1].contents == ' '; k--);/*						if (!confirm ("About to insert an asterisk or two.\r\r"										+ "myParagraph: \r\r" + myParagraph.contents + "\r"										+ "(starting at " + myParagraph.index + " and going to " + (myParagraph.index + myParagraph.length) + ")" + "\r\r\r"										+ "myParagraph.textStyleRanges[" + j + "] (total range 0-" + (myParagraph.textStyleRanges.length-1) + "):" + "\r\r" + myRange.contents + "\r\r"										+ "(starting at " + myParagraph.textStyleRanges[j].index + " and going to " + (myRange.index + myRange.length) + ")" + "\r\r\r"										+ "myStory.characters[" + k + "]: \r\r" + myStory.characters[k].contents))  return;						*/													myStory.insertionPoints[k].contents = myMarkdown.fontStyles[style];					}							myPreviousFontStyles[style] = myCurrentFontStyles[style];						}				}		}						//  11.  Take all e-mail addresses that are not already hyperlinks and turn them into hyperlinks.		var myRegexpString = /[\w\-\.]+@([\w\-]+\.)+[\w\-]{2,5}/.toString().slice(1,-1);		var myFoundEmails = myFindGrep(myParagraph, {findWhat: myRegexpString});		var myFoundEmail;		var myDoc = myStory.parent;		var myHyperlinkTextSource, myHyperlinkURLDest, myNewHyperlink;		for (var eNum=0; eNum < myFoundEmails.length; eNum++) {			myFoundEmail = myFoundEmails[eNum];			try {				myHyperlinkTextSource = myDoc.hyperlinkTextSources.add (myFoundEmail); // This will fail when the text in question is already a hyperlink.				myHyperlinkURLDest = myDoc.hyperlinkURLDestinations.add();				myNewHyperlink = myDoc.hyperlinks.add(myHyperlinkTextSource, myHyperlinkURLDest);				myNewHyperlink.destination.destinationURL = "mailto:" + myFoundEmail.contents;				myNewHyperlink.name = myFoundEmail.contents;			}			catch (e) { } // This will happen if the e-mail address is already a hyperlink.		}						//  12.  Take all twitter @ tags that are not already hyperlinks and turn them into hyperlinks.		var myRegexpString = /(?<=\s)@\w+\>/.toString().slice(1,-1);		var myFoundTwitters = myFindGrep(myParagraph, {findWhat: myRegexpString});		var myFoundTwitter;		var myDoc = myStory.parent;		var myHyperlinkTextSource, myHyperlinkURLDest, myNewHyperlink;		for (var eNum=0; eNum < myFoundTwitters.length; eNum++) {			myFoundTwitter = myFoundTwitters[eNum];			try {				myHyperlinkTextSource = myDoc.hyperlinkTextSources.add (myFoundTwitter); // This will fail when the text in question is already a hyperlink.				myHyperlinkURLDest = myDoc.hyperlinkURLDestinations.add();				myNewHyperlink = myDoc.hyperlinks.add(myHyperlinkTextSource, myHyperlinkURLDest);				myNewHyperlink.destination.destinationURL = "http://www.twitter.com/" + myFoundTwitter.contents.slice(1);				myNewHyperlink.name = myFoundTwitter.contents;			}			catch (e) { } // This will happen if the e-mail address is already a hyperlink.		}						// Now take care of the very end of the paragraph.  Special case.  This is necessary		// to put markdown sequences on bold and italic tags at the end of every paragraph if they are needed,		// because indesign textStyleRanges cross over paragraphs while inline markdown tags		// (like bold and italic) should not.				for (var style in myMarkdown.fontStyles) {			if (myCurrentFontStyles[style] == true) myParagraph.insertionPoints[-2].contents = myMarkdown.fontStyles[style];		}					// OTHER STUFF TO BE DONE:		// Maybe fix up other random little stuff like the capitalization of the subhed of each section in Forward Looking Back.					// Markdown blockquotes and poetry 		if (((myParagraph.appliedParagraphStyle.name.search(myStyleStrings.blockquote) != -1) 			|| (myParagraph.appliedParagraphStyle.name.search(myStyleStrings.poetry) != -1))				&& (myParagraph.contents[0] != myMarkdown.blockquote)				&& (myParagraph.length > 1)) {						myParagraph.insertionPoints[0].contents = myMarkdown.blockquote;		}				// Markdown all paragraph breaks, i.e. double them.  i then gets incremented by 2 instead of the usual 1.		myParagraph.insertionPoints[-1].contents = "\r";	}	// Now that all the line-by-line stuff is done, go back through the whole story.		// 1. Clean up extra line breaks (i.e. more than two in a row) 	// Note:  MAKE THIS UNNECESSARY LATER.  RIGHT NOW I JUST CAN'T FIGURE OUT WHY	// IT'S CREATING THOSE EXTRA PARAGRAPH BREAKS IN THE FIRST PLACE.	var tempDebug;	tempDebug = myFindGrep(myStory, {findWhat: "\r\r\r+"}, {changeTo: "\r\r"}, {wholeWord: false, caseSensitive: true});	if (tempDebug.length > 0) {// DEBUGGING	alert ("We found some extra paragraphs and got rid of them.");	}		// 2. Markdown the soft returns	// (i.e., convert them to single hard returns with two spaces before them).		myFindText(myStory, {findWhat: "\n"}, {changeTo: "  \r"}, {wholeWord: false, caseSensitive: true});		// Get rid of the extra paragraph marks at the end of the story.	while (myStory.characters[-1].contents == '\r') myStory.characters[-1].contents = '';		// Last but not least, convert all Indesign hyperlinks to markdown.	var myHyperlink;	var myDoc = myStory.parent;	var mySourceStr, myDestStr;	// First deal with the hyperlinks.	for (i = myDoc.hyperlinks.length-1; i >= 0; i--) {		myHyperlink = myDoc.hyperlinks[i];		mySourceText = myHyperlink.source.sourceText;		// Escape closing brackets, square and round, and opening square brackets.		myFindGrep (mySourceText, {findWhat: "]"}, {changeTo: "\\]"});		myFindGrep (mySourceText, {findWhat: "\\["}, {changeTo: "\\["});		myHyperlink.destination.destinationURL = myHyperlink.destination.destinationURL.replace(/)/g, "\\)");		// Only process hyperlinks that are in this story.		if (mySourceText.parentStory == myStory) {			mySourceText.contents = "[" + mySourceText.contents + "](" + myHyperlink.destination.destinationURL +")";		}	}
	
	// And really last but not least, display the locations of the notes in html comments
	// (The notes themselves are at the top of the document).
	
	// First add the header.
	if (myStory.notes.length > 0) {		myStory.insertionPoints[0].contents = "\r\r";		myStory.characters[0].properties = {pointSize: "12pt", leading: "15pt"};				var myNotesStr = "<!--\r\rNOTES:\r\r"; 		for (i = 0; i < myStory.notes.length; i++) { 			myNotesStr += "Note " + (i+1) + ": " + myStory.notes[i].texts[0].contents + "\r"; 		} 		myNotesStr += "\r-->"; 		myStory.insertionPoints[0].contents = myNotesStr;	}
	
  //Now add information about the locations of the notes.
	if (myStory.notes.length > 0) {		var myNote;
		var myNoteIndex; 		for (i = myStory.notes.length-1; i >= 0; i--) {
 			myNote = myStory.notes[i];
 			myNoteIndex = myStory.notes[i].storyOffset.index;
 			myStory.insertionPoints[myNoteIndex+1].contents = ' -->';
 			myStory.insertionPoints[myNoteIndex].contents = '<!-- ';
 			myNote.texts[0].contents = "Note " + (i+1);
 			myNote.convertToText();
 		}
	}
}var mySelection = app.selection[0];if (typeof mySelection != 'undefined') {	switch (mySelection.constructor.name) {		case "Character":		case "Word":		case "TextStyleRange":		case "Line":		case "Paragraph":		case "TextColumn":		case "Text":		case "InsertionPoint" :		case "TextFrame" :					var myGhostFile = File.saveDialog ("Please save your file.  The suffix \".rtf\" will be added automatically.");			if (myGhostFile == null) exit();			var myPath = myGhostFile.path;			var myBaseName = myGhostFile.name;			myGhostFile.remove();						// Just in case the user doesn't read that prompt above:			if (myBaseName.slice(-4) == ".rtf") {				myBaseName = myBaseName.slice (0, -4)			}						var myExportedFile = new File (myPath + "/" + myBaseName + ".rtf");			myExportedFile.open();						var myStory = mySelection.parentStory;			// Here is the beginning of the stuff that has to be changed if we change it back to // visibly altering the text.// If we open in a new document, this should work in InCopy.						var myScratchDoc = app.documents.add (/*showingWindow*/ false);			if (app.name == "Adobe InDesign") {			  var myScratchTextFrame = myScratchDoc.pages[0].textFrames.add();			}			else { // app is InCopy, where a text frame would get added automatically in a new document.			  var myScratchTextFrame = myScratchDoc.pages[0].textFrames[0];			}			var myScratchStory = myScratchTextFrame.parentStory;			myStory.duplicate (LocationOptions.AFTER, myScratchStory.insertionPoints[0]);			processStory (myScratchStory);			myScratchStory.exportFile (ExportFormat.RTF, myExportedFile);						myScratchDoc.close(SaveOptions.NO);			myExportedFile.close();			      // Open the resulting text file in TextEdit, so people can       // see it was created.      app.doScript ('tell application "TextEdit" \r' +                     '  activate \r' +                     '  open ("' + myExportedFile.fsName + '") \r' +                     'end tell' ,                    ScriptLanguage.APPLESCRIPT_LANGUAGE);					break;	}}else {	alert ("You need to select something.");}					function myFindText(myObject, myFindPreferences, myChangePreferences, myFindChangeOptions){	//Reset the find/change preferences before each search.	app.changeTextPreferences = NothingEnum.nothing;	app.findTextPreferences = NothingEnum.nothing;	app.findTextPreferences.properties = myFindPreferences;	if (myChangePreferences) app.changeTextPreferences.properties = myChangePreferences;	if (myFindChangeOptions) app.findChangeTextOptions.properties = myFindChangeOptions;	var myFoundItems;	if (myChangePreferences) {		myFoundItems = myObject.changeText();	}	else {		myFoundItems = myObject.findText();	}	//Reset the find/change preferences after each search.	app.changeTextPreferences = NothingEnum.nothing;	app.findTextPreferences = NothingEnum.nothing;	return myFoundItems;}function myFindGrep(myObject, myFindPreferences, myChangePreferences, myFindChangeOptions){	//Reset the find/change grep preferences before each search.	app.changeGrepPreferences = NothingEnum.nothing;	app.findGrepPreferences = NothingEnum.nothing;	app.findGrepPreferences.properties = myFindPreferences;	if (myChangePreferences) app.changeGrepPreferences.properties = myChangePreferences;	if (myFindChangeOptions) app.findChangeGrepOptions.properties = myFindChangeOptions;	var myFoundItems;	if (myChangePreferences) {		myFoundItems = myObject.changeGrep();	}	else {		myFoundItems = myObject.findGrep();	}	//Reset the find/change grep preferences after each search.	app.changeGrepPreferences = NothingEnum.nothing;	app.findGrepPreferences = NothingEnum.nothing;	return myFoundItems;}function myFindGlyph(myObject, myFindPreferences, myChangePreferences, myFindChangeOptions){	//Reset the find/change glyph preferences before each search.	app.changeGlyphPreferences = NothingEnum.nothing;	app.findGlyphPreferences = NothingEnum.nothing;	app.findGlyphPreferences.properties;	if (myChangePreferences) app.changeGlyphPreferences.properties;	if (myFindChangeOptions) app.findChangeGlyphOptions.properties;	if (myChangePreferences) {		myFoundItems = myObject.changeGlyph();	}	else {		myFoundItems = myObject.findGlyph();	}	//Reset the find/change glyph preferences after each search.	app.changeGlyphPreferences = NothingEnum.nothing;	app.findGlyphPreferences = NothingEnum.nothing;	return myFoundItems;}app.scriptPreferences.enableRedraw = true;	/*// debugging text					if (!confirm ("Paragraph " + i +", TextStyleRange " + j + " contents : " + myParagraph.textStyleRanges[j].contents + "\r\r"										+ "myPreviousFontStyles['bold'] = " + myPreviousFontStyles['bold'] + "\r"										+ "myPreviousFontStyles['italic'] = " + myPreviousFontStyles['italic'] + "\r\r"										+ "myCurrentFontStyles['bold'] = " + myCurrentFontStyles['bold'] + "\r"										+ "myCurrentFontStyles['italic'] = " + myCurrentFontStyles['italic'])) {						return;					}// end debugging text						*/